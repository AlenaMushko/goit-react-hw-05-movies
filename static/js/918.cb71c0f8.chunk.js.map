{"version":3,"file":"static/js/918.cb71c0f8.chunk.js","mappings":"iRAEMA,EAAM,mCAEZC,EAAAA,EAAAA,SAAAA,QAAyB,gCAEzB,IAAMC,EAAG,mCAAG,yGAAOC,EAAP,oDAEeF,EAAAA,EAAAA,IAAUE,GAFzB,cAEFC,EAFE,yBAGDA,GAHC,gCAKRC,QAAQC,IAAR,MALQ,yDAAH,qDASIC,EAAc,WACzB,OAAOL,EAAI,8BAAD,OAA+BF,GAC1C,EAEYQ,EAAa,SAACC,GACzB,OAAOP,EAAI,yBAAD,OAA0BF,EAA1B,kBAAuCS,GAClD,EAEM,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAuCC,GAAvC,0FACIT,EAAI,SAAD,OAAUS,EAAV,oBAAwBX,KAD/B,kEAIA,SAAeY,EAAtB,+CAAO,OAAP,oBAAO,WAAwBD,GAAxB,0FACIT,EAAI,SAAD,OAAUS,EAAV,4BAAgCX,KADvC,kEAIA,SAAea,EAAtB,+CAAO,OAAP,oBAAO,WAA2BF,GAA3B,0FACIT,EAAI,SAAD,OAAUS,EAAV,4BAAgCX,KADvC,kE,8EC7BA,SAASc,IACd,OACE,gBAAKC,MAAO,CAAEC,OAAQ,OAAQC,QAAQ,SAAtC,UACE,SAAC,KAAD,KAGL,C,+KCLYC,GAAaC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,mP,SCAVE,EAAW,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,GAAIC,EAAe,EAAfA,SAC7B,OACE,UAACL,EAAD,CAAYI,GAAIA,EAAhB,WACE,SAAC,MAAD,CAAaE,KAAK,OACjBD,IAGN,ECRYE,EAAYN,EAAAA,GAAAA,IAAH,wC,iDCATO,EAASP,EAAAA,GAAAA,IAAH,yEAMNQ,EAAMR,EAAAA,GAAAA,IAAH,kEAKHS,EAAYT,EAAAA,GAAAA,GAAH,gGAqBTU,GAfMV,EAAAA,GAAAA,EAAH,iTAeQA,EAAAA,GAAAA,GAAH,uSC7BfW,EAAW,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAEhBpB,EAOEoB,EAPFpB,GACAqB,EAMED,EANFC,YACAC,EAKEF,EALFE,MACAC,EAIEH,EAJFG,aACAC,EAGEJ,EAHFI,aACAC,EAEEL,EAFFK,SACAC,EACEN,EADFM,OAEIC,EAAcJ,EAAaK,MAAM,KAAK,GACtCC,EAAaH,EAAOI,KAAI,SAAAC,GAAK,OAAIA,EAAMC,IAAV,IAAgBC,KAAK,MACxD,OACE,iCACE,UAAClB,EAAD,YACE,SAACC,EAAD,CACEkB,IACEb,EAAW,0CAC4BA,GAD5B,UAEJc,GAETC,IAAKd,KAEP,4BACE,UAACL,EAAD,WACGK,EADH,KACYK,EADZ,QAGA,wCAAgBU,KAAKC,MAAqB,GAAfd,GAA3B,QACA,sCACA,uBAAIC,KACJ,oCACA,uBAAII,WAGR,4BACE,mBACA,oDACA,2BACE,SAAC,KAAD,CACElB,IAAI4B,EAAAA,EAAAA,IAAaC,EAAAA,EAAAA,KAAiB,CAAExC,GAAAA,IADtC,UAGE,UAACkB,EAAD,YACE,iCAAc,UAGlB,SAAC,KAAD,CACEP,IAAI4B,EAAAA,EAAAA,IAAaC,EAAAA,EAAAA,OAAmB,CAAExC,GAAAA,IACtCI,MAAO,kBAAmB,CACxBqC,MADK,EAAGC,SACU,mBAAqB,aADlC,EAFT,UAME,SAACxB,EAAD,WACE,4CAIN,mBACA,SAAC,KAAD,SAIP,EAED,IAEAC,EAASwB,UAAY,CACnBvB,KAAMwB,IAAAA,QACJA,IAAAA,MAAgB,CACd5C,GAAI4C,IAAAA,OACLtB,MAAOsB,IAAAA,OACNvB,YAAauB,IAAAA,OACbpB,aAAcoB,IAAAA,OACdrB,aAAcqB,IAAAA,OACdnB,SAAUmB,IAAAA,OACVlB,OAAQkB,IAAAA,UAEVC,YCzEJ,IAkCA,EAlCkB,WAAO,IAAD,IACtB,GAAkCC,EAAAA,EAAAA,WAAS,GAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KAEMC,EAAY,qBADDC,EAAAA,EAAAA,MACaC,aAAZ,aAAG,EAAgBC,YAAnB,QAA2B,IAErCpD,GAAOqD,EAAAA,EAAAA,MAAPrD,GACR,GAA0C8C,EAAAA,EAAAA,UAAS,MAAnD,eAAOQ,EAAP,KAAsBC,EAAtB,KAgBA,OAdAC,EAAAA,EAAAA,YAAU,WACRR,GAAa,IACbjD,EAAAA,EAAAA,IAAwBC,GACrByD,MAAK,SAAAC,GAEJH,EAAiBG,EAClB,IACAC,OAAM,SAAAC,GACLlE,QAAQC,IAAIiE,EACb,IACAC,SAAQ,WACPb,GAAa,EACd,GACJ,GAAE,CAAChD,KAEF,2BACE,UAACc,EAAD,WACCiC,IAAa,SAAC5C,EAAA,EAAD,KACd,SAACO,EAAD,CAAUC,GAAIsC,EAAd,2BACGK,IAAiB,SAAC,EAAD,CAAUlC,KAAI,OAAEkC,QAAF,IAAEA,OAAF,EAAEA,EAAeQ,WAKxD,C","sources":["components/API.js","components/Loader/Loader.js","components/BackLink/BackLink.styled.js","components/BackLink/BackLink.js","pages/InfoFilms/InfoFilms.styled.js","components/FilmCard/FilmCard.styled.js","components/FilmCard/FilmCard.js","pages/InfoFilms/InfoFilms.js"],"sourcesContent":["import axios from 'axios';\n\nconst KEY = '32432509d17cea42104bbb7507a382c7';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst Api = async (url = ``) => {\n  try {\n    const response = await axios.get(url);\n    return response;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const ApiTrending = () => {\n  return Api(`trending/movie/day?api_key=${KEY}`);\n};\n\nexport const ApiByQuery = (searchQuery) => {\n  return Api(`/search/movie?api_key=${KEY}&query=${searchQuery}`);\n}\n\nexport async function CompleteInformationFilm(id) {\n   return  Api(`movie/${id}?api_key=${KEY}`);\n}\n\nexport async function CastFilm(id) {\n   return  Api(`movie/${id}/credits?api_key=${KEY}`);\n}\n\nexport async function ReviewsFilm(id) {\n   return  Api(`movie/${id}/reviews?api_key=${KEY}`);\n}\n\n","import { ColorRing } from 'react-loader-spinner';\n\nexport function Loader() {\n  return (\n    <div style={{ margin: 'auto', display:\"block\" }}>\n      <ColorRing />\n    </div>\n  );\n}\n","import { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const StyledLink = styled(Link)`\n  display: inline-flex;\n  align-items: center;\n  gap: 4px;\n  padding: 8px 0;\n  color: whitesmoke;\n  text-decoration: none;\n  font-weight: 500;\n  text-transform: uppercase;\n\n  :hover {\n    color: tomato;\n  }\n`;","import { HiArrowLeft } from \"react-icons/hi\";\nimport { StyledLink } from \"./BackLink.styled\";\n\nexport const BackLink = ({ to, children }) => {\n  return (\n    <StyledLink to={to}>\n      <HiArrowLeft size=\"24\" />\n      {children}\n    </StyledLink>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\npadding: 15px;\n`;","import styled from 'styled-components';\n\nexport const Wraper = styled.div`\ndisplay:flex;\ngap:28px;\n margin: 30px  0 0 0;\n`;\n\nexport const Img = styled.img`\n  border-radius: 5px;\n  height:604.5px;\n`;\n\nexport const FilmTitle = styled.h2`\n  margin-top: 10px;\n  text-transform: uppercase;\n  color:whitesmoke;\n`;\n\nexport const Box = styled.p`\n  position: absolute;\n  z-index: 15;\n  top: 2%;\n  right: 4%;\n  display: flex;\n  width: 60px;\n  height: 30px;\n  border-radius: 5px;\n  background-color: rgba(165, 14, 14, 0.6);\n  color: whitesmoke;\n  text-align: center;\n  justify-content: center;\n  align-items: center;\n`;\nexport const FilmItem = styled.li`\ncolor:whitesmoke;\ndisplay: block;\nborder-radius:4px;\nborder:2px solid tomato;\ntext-align:center;\nmax-width:170px;\ntransition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n:first-child{\n  margin-bottom:20px;\n}\n:hover {\n  background-color:tomato;\n}\n\n`\n","import PropTypes from 'prop-types';\nimport { generatePath, NavLink, Outlet } from 'react-router-dom';\nimport { PAGE_NAMES } from 'router/paths';\nimport noPhoto from '../../img/noPhoto .png';\nimport { FilmItem, FilmTitle, Img, Wraper } from './FilmCard.styled';        \nconst FilmCard = ({ film }) => {\n  const {\n    id,\n    poster_path,\n    title,\n    release_date,\n    vote_average,\n    overview,\n    genres,\n  } = film;\n  const releaseYear = release_date.split('-')[0];\n  const genresName = genres.map(genre => genre.name).join(', ');\n  return (\n    <>\n      <Wraper>\n        <Img\n          src={\n            poster_path\n              ? `https://image.tmdb.org/t/p/w500/${poster_path}`\n              : `${noPhoto}`\n          }\n          alt={title}\n        />\n        <div>\n          <FilmTitle>\n            {title} ({releaseYear})\n          </FilmTitle>\n          <p>User Score: {Math.round(vote_average * 10)}%</p>\n          <h3>Overview</h3>\n          <p>{overview}</p>\n          <h3>Genres</h3>\n          <p>{genresName}</p>\n        </div>\n      </Wraper>\n      <div>\n        <hr />\n        <h2>Additional information</h2>\n        <ul>\n          <NavLink\n            to={generatePath(PAGE_NAMES.cast, { id })}\n          >\n            <FilmItem>\n              <h3>Cast</h3>{' '}\n            </FilmItem>\n          </NavLink>\n          <NavLink\n            to={generatePath(PAGE_NAMES.review, { id })}\n            style={({ isActive }) => ({\n              color: isActive ? 'rgb(165, 14, 14)' : 'whitesmoke',\n            })}\n          >\n            <FilmItem>\n              <h3>Reviews</h3>\n            </FilmItem>\n          </NavLink>\n        </ul>\n        <hr />\n        <Outlet />\n      </div>\n    </>\n  );\n};\n\nexport default FilmCard;\n\nFilmCard.prototype = {\n  film: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number,\n     title: PropTypes.string,\n      poster_path: PropTypes.string,\n      vote_average: PropTypes.number,\n      release_date: PropTypes.number,\n      overview: PropTypes.string,\n      genres: PropTypes.number,\n    }),\n  ).isRequired,\n};\n","import { useState, useEffect } from 'react';\nimport { useLocation, useParams } from 'react-router-dom';\nimport { Loader } from 'components/Loader/Loader';\nimport { CompleteInformationFilm } from 'components/API';\nimport { BackLink } from 'components/BackLink/BackLink';\nimport { Container } from './InfoFilms.styled';\nimport FilmCard from 'components/FilmCard/FilmCard';\n\nconst InfoFilms = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const location = useLocation();\n  const backLinkHref = location.state?.from ?? '/';\n  // const params = useParams();\n  const { id } = useParams();\n  const [infoAboutFilm, setInfoAboutFilm] = useState(null);\n  \n  useEffect(() => {\n    setIsLoading(true);\n    CompleteInformationFilm(id)\n      .then(resolve => {\n        // setIsLoading(true);\n        setInfoAboutFilm(resolve);\n      })\n      .catch(error => {\n        console.log(error);\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, [id]);\n  return (\n    <main>\n      <Container>\n      {isLoading && <Loader />}\n      <BackLink to={backLinkHref}>Back to films</BackLink>\n        {infoAboutFilm && <FilmCard film={infoAboutFilm?.data} />}\n      \n        </Container>\n    </main>\n  );\n};\n\nexport default InfoFilms;\n"],"names":["KEY","axios","Api","url","response","console","log","ApiTrending","ApiByQuery","searchQuery","CompleteInformationFilm","id","CastFilm","ReviewsFilm","Loader","style","margin","display","StyledLink","styled","Link","BackLink","to","children","size","Container","Wraper","Img","FilmTitle","FilmItem","FilmCard","film","poster_path","title","release_date","vote_average","overview","genres","releaseYear","split","genresName","map","genre","name","join","src","noPhoto","alt","Math","round","generatePath","PAGE_NAMES","color","isActive","prototype","PropTypes","isRequired","useState","isLoading","setIsLoading","backLinkHref","useLocation","state","from","useParams","infoAboutFilm","setInfoAboutFilm","useEffect","then","resolve","catch","error","finally","data"],"sourceRoot":""}